# -*- coding: utf-8 -*-
"""ShapeCode.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SA1sDPmUdlYJv-dSO2I5dF5gDhGVh-kt
"""

import pandas as pd
import json
import re
import ast
from enum import Enum
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

from google.colab import drive
drive.mount('/content/drive')

"""import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
df1=pd.DataFrame(columns=['type', 'number_turns', 'num_teeth1', 'tooth_depth1', 'hole_radius', 'num_teeth2', 'tooth_depth2', 'indent_radius','elev'])

gear_thickness = 10
gear_radius=10
count=0
for num_teeth in range(10,36,5):
        for tooth_depth in range(10,36,5):
          tooth_depth = tooth_depth/10
          for hole_radius in range(5,26,5): # Radius of center hole
            hole_radius=hole_radius/10
            for elev in range(30,51,10):
              count=count+1
              print(count)


              df1.loc[len(df1)] = [1,-1, num_teeth,tooth_depth,hole_radius,-1,-1,-1,elev]

              # Spur gear parameters

              # Create meshgrid (exclude the hole region)
              theta = np.linspace(0, 2 * np.pi, 800)
              r = np.linspace(hole_radius, gear_radius + tooth_depth, 100)  # Start from hole_radius
              theta, z = np.meshgrid(theta, np.linspace(0, gear_thickness, 50))
              r = gear_radius + tooth_depth * np.sin(num_teeth * theta)

              # Parametric surface (teeth wrapped around gear)
              x = r * np.cos(theta)
              y = r * np.sin(theta)

              # Plot
              fig = plt.figure(figsize=(gear_radius*2, gear_thickness))
              ax = fig.add_subplot(111, projection='3d')

              # Gear body
              ax.plot_surface(x, y, z, rstride=5, cstride=5, color='steelblue', edgecolor='k', alpha=0.9)

              # --- Caps with hole ---
              # Top and bottom caps: only draw outer ring (with hole)
              cap_theta = np.linspace(0, 2 * np.pi, 800)
              cap_radii = np.linspace(hole_radius, gear_radius + tooth_depth, 200)
              cap_r, cap_theta = np.meshgrid(cap_radii, cap_theta)
              x_cap = cap_r * np.cos(cap_theta)
              y_cap = cap_r * np.sin(cap_theta)


              # Bottom cap at z=gear_thickness
              z_top = np.full_like(x_cap, gear_thickness)
              ax.plot_surface(x_cap, y_cap, z_top, color='steelblue', alpha=0.9, edgecolor='k')


              # Top cap at z=gear_thickness
              z_bottom = np.zeros_like(x_cap)
              ax.plot_surface(x_cap, y_cap, z_bottom, color='steelblue', alpha=0.9, edgecolor='k')

              # Hide X-axis line
              ax.set_xticks([])  # Hide ticks
              ax.set_xlabel("")  # Optionally hide label
              ax.xaxis.line.set_color((0, 0, 0, 0))  # Transparent
              ax.yaxis.line.set_color((0, 0, 0, 0))
              ax.zaxis.line.set_color((0, 0, 0, 0))

              # === Hide background ===
              ax.xaxis.pane.fill = False
              ax.yaxis.pane.fill = False
              ax.zaxis.pane.fill = False

              # Optional: Hide grid and axes ticks
              ax.grid(False)
              ax.set_xticks([])
              ax.set_yticks([])
              ax.set_zticks([])


              # Optional: Set pane color to fully transparent
              ax.xaxis.pane.set_edgecolor('w')
              ax.yaxis.pane.set_edgecolor('w')
              ax.zaxis.pane.set_edgecolor('w')


              ax.set_box_aspect([1, 1, 0.4])
              ax.view_init(elev=elev, azim=45)
              ax.grid(False)

              plt.tight_layout()
              plt.savefig("/content/drive/MyDrive/Shapes_Project_2025/Image_Spur/numteeth_" +str(num_teeth)+"_toothdepth_"+str(tooth_depth)+"_holeradius_"+str(hole_radius)+"_elev_"+str(elev)+".png")
              print("/content/drive/MyDrive/Shapes_Project_2025/Image_Spur/numteeth_" +str(num_teeth)+"_toothdepth_"+str(tooth_depth)+"_holeradius_"+str(hole_radius)+"_elev_"+str(elev)+".png")
              plt.show()
df1.to_csv("/content/drive/MyDrive/Shapes_Project_2025/Spur.csv")"""

#Crankshaft Gear

"""
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

df2=pd.DataFrame(columns=['type', 'number_turns', 'num_teeth1', 'tooth_depth1', 'hole_radius', 'num_teeth2', 'tooth_depth2', 'indent_radius','elev'])

def create_spur_gear_with_indent(num_teeth, gear_radius, tooth_depth, thickness,
                                  hole_radius, indent_radius, indent_depth,
                                  center_x=0, center_y=0, z_offset=0):
    theta = np.linspace(0, 2 * np.pi, 800)
    z = np.linspace(0, thickness, 50) + z_offset
    theta, z = np.meshgrid(theta, z)
    r = gear_radius + tooth_depth * np.sin(num_teeth * theta)

    x = r * np.cos(theta) + center_x
    y = r * np.sin(theta) + center_y

    # Caps
    cap_theta = np.linspace(0, 2 * np.pi, 800)
    cap_radii = np.linspace(hole_radius, gear_radius + tooth_depth, 300)
    cap_r, cap_theta = np.meshgrid(cap_radii, cap_theta)
    x_cap = cap_r * np.cos(cap_theta) + center_x
    y_cap = cap_r * np.sin(cap_theta) + center_y

    # Indent on top cap
    z_top = np.full_like(x_cap, z_offset + thickness)
    indent_mask = cap_r < indent_radius
    z_top[indent_mask] -= indent_depth  # Apply indent inside the radius

    z_bottom = np.full_like(x_cap, z_offset)

    return (x, y, z, x_cap, y_cap, z_bottom, z_top)

gear_thickness = 10
gear_radius=10
indent_depth = 3
count=0
for num_teeth in range(10,36,5):
        for tooth_depth in range(10,31,5):
          tooth_depth = tooth_depth/10
          for hole_radius in range(1,3,1): # Radius of center hole
            for indent_radius in range(3,6,1): # Radius of indent ring
              for elev in range(30,51,10):
                  count=count+1
                  print(count)
                  df2.loc[len(df2)] = [2,-1, num_teeth,tooth_depth,hole_radius, -1, -1,indent_radius, elev]
                  # Parameters
                  gear = dict(
                      num_teeth=num_teeth,
                      gear_radius=gear_radius,
                      tooth_depth=tooth_depth,
                      thickness=gear_thickness,
                      hole_radius=hole_radius,
                      indent_radius=indent_radius,   # Radius of indent ring
                      indent_depth=indent_depth     # How deep the indent is
                  )

                  # Create gear with indent on top
                  gear_data = create_spur_gear_with_indent(**gear)

                  # Plotting
                  fig = plt.figure(figsize=(10, 10))
                  ax = fig.add_subplot(111, projection='3d')

                  x, y, z, x_cap, y_cap, z_bottom, z_top = gear_data

                  # Gear body
                  ax.plot_surface(x, y, z, rstride=5, cstride=5, color='steelblue', edgecolor='k', alpha=0.95)

                  # Caps
                  ax.plot_surface(x_cap, y_cap, z_bottom, color='steelblue', alpha=0.95, edgecolor='k')  # Bottom
                  ax.plot_surface(x_cap, y_cap, z_top, color='steelblue', alpha=0.95, edgecolor='k')     # Top with indent

                  # View settings

                  ax.set_box_aspect([1, 1, 0.4])
                  ax.view_init(elev=elev, azim=45)
                  ax.grid(False)


                  # Hide X-axis line
                  ax.set_xticks([])  # Hide ticks
                  ax.set_xlabel("")  # Optionally hide label
                  ax.xaxis.line.set_color((0, 0, 0, 0))  # Transparent
                  ax.yaxis.line.set_color((0, 0, 0, 0))
                  ax.zaxis.line.set_color((0, 0, 0, 0))

                  # === Hide background ===
                  ax.xaxis.pane.fill = False
                  ax.yaxis.pane.fill = False
                  ax.zaxis.pane.fill = False

                  # Optional: Hide grid and axes ticks
                  ax.grid(False)
                  ax.set_xticks([])
                  ax.set_yticks([])
                  ax.set_zticks([])


                  # Optional: Set pane color to fully transparent
                  ax.xaxis.pane.set_edgecolor('w')
                  ax.yaxis.pane.set_edgecolor('w')
                  ax.zaxis.pane.set_edgecolor('w')

                  plt.tight_layout()
                  plt.savefig("/content/drive/MyDrive/Shapes_Project_2025/Image_Crankshaft/numteeth_" + str(num_teeth)+ "_toothdepth_"+str(tooth_depth*10)+"div10_holeradius_" +str(hole_radius)+"_indentradius_"+str(indent_radius)+"_elev_"+str(elev)+".png")
                  print("/content/drive/MyDrive/Shapes_Project_2025/Image_Crankshaft/numteeth_" + str(num_teeth)+ "_toothdepth_"+str(tooth_depth*10)+"div10_holeradius_" +str(hole_radius)+"_indentradius_"+str(indent_radius)+"_elev_"+str(elev)+".png")

                  plt.show()
df2.to_csv("/content/drive/MyDrive/Shapes_Project_2025/Crankshaft.csv")"""

#Reduction Gear
"""
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
df3=pd.DataFrame(columns=['type', 'number_turns', 'num_teeth1', 'tooth_depth1', 'hole_radius', 'num_teeth2', 'tooth_depth2', 'indent_radius','elev'])
count=0
def create_spur_gear(num_teeth, gear_radius, tooth_depth, thickness, hole_radius, center_x=0, center_y=0, z_offset=0):
    theta = np.linspace(0, 2 * np.pi, 800)
    z = np.linspace(0, thickness, 50) + z_offset
    theta, z = np.meshgrid(theta, z)
    r = gear_radius + tooth_depth * np.sin(num_teeth * theta)

    # Gear surface
    x = r * np.cos(theta) + center_x
    y = r * np.sin(theta) + center_y

    # Caps with center hole
    cap_theta = np.linspace(0, 2 * np.pi, 800)
    cap_radii = np.linspace(hole_radius, gear_radius + tooth_depth, 200)
    cap_r, cap_theta = np.meshgrid(cap_radii, cap_theta)
    x_cap = cap_r * np.cos(cap_theta) + center_x
    y_cap = cap_r * np.sin(cap_theta) + center_y
    z_bottom = np.full_like(x_cap, z_offset)
    z_top = np.full_like(x_cap, z_offset + thickness)

    return (x, y, z, x_cap, y_cap, z_bottom, z_top)

# Gear parameters — note: same hole_radius and center for alignment


for num_teeth1 in range(10,36,5):
  for num_teeth2 in range(10,31,5):
    for tooth_depth1 in range(10,21,5):
        tooth_depth1 = tooth_depth1/10
        for tooth_depth2 in range(10,11,5):
          tooth_depth2 = tooth_depth2/10
          for hole_radius_shared in range(10,16,5): # Radius of center hole
              hole_radius_shared=hole_radius_shared/10
              for elev in range(40,61,10):
                  count=count+1
                  print(count)
                  df3.loc[len(df3)] = [3,-1, num_teeth1,tooth_depth1,hole_radius_shared, num_teeth2, tooth_depth2,-1, elev]
                  # Parameters
                  gear1 = dict(num_teeth=num_teeth1, gear_radius=10.0, tooth_depth=tooth_depth1, thickness=15.0, hole_radius=hole_radius_shared)
                  gear2 = dict(num_teeth=num_teeth2, gear_radius=6.0, tooth_depth=tooth_depth2, thickness=20.0, hole_radius=hole_radius_shared)

                  # Stack vertically
                  z_offset_gear2 = gear1["thickness"]

                  # Create gears at same X,Y center (aligned holes)
                  gear1_data = create_spur_gear(**gear1, center_x=0, center_y=0, z_offset=0)
                  gear2_data = create_spur_gear(**gear2, center_x=0, center_y=0, z_offset=z_offset_gear2)

                  # Plot
                  fig = plt.figure(figsize=(10, 10))
                  ax = fig.add_subplot(111, projection='3d')

                  # Gear 1
                  x1, y1, z1, x1c, y1c, zb1, zt1 = gear1_data
                  ax.plot_surface(x1, y1, z1, rstride=5, cstride=5, color='steelblue', edgecolor='k', alpha=0.95)
                  ax.plot_surface(x1c, y1c, zb1, color='steelblue', alpha=0.95, edgecolor='k')
                  ax.plot_surface(x1c, y1c, zt1, color='steelblue', alpha=0.95, edgecolor='k')

                  # Gear 2
                  x2, y2, z2, x2c, y2c, zb2, zt2 = gear2_data
                  ax.plot_surface(x2, y2, z2, rstride=5, cstride=5, color='darkred', edgecolor='k', alpha=0.95)
                  ax.plot_surface(x2c, y2c, zb2, color='darkred', alpha=0.95, edgecolor='k')
                  ax.plot_surface(x2c, y2c, zt2, color='darkred', alpha=0.95, edgecolor='k')

                  # Hide X-axis line
                  ax.set_xticks([])  # Hide ticks
                  ax.set_xlabel("")  # Optionally hide label
                  ax.xaxis.line.set_color((0, 0, 0, 0))  # Transparent
                  ax.yaxis.line.set_color((0, 0, 0, 0))
                  ax.zaxis.line.set_color((0, 0, 0, 0))

                  # === Hide background ===
                  ax.xaxis.pane.fill = False
                  ax.yaxis.pane.fill = False
                  ax.zaxis.pane.fill = False

                  # Optional: Hide grid and axes ticks
                  ax.grid(False)
                  ax.set_xticks([])
                  ax.set_yticks([])
                  ax.set_zticks([])


                  # Optional: Set pane color to fully transparent
                  ax.xaxis.pane.set_edgecolor('w')
                  ax.yaxis.pane.set_edgecolor('w')
                  ax.zaxis.pane.set_edgecolor('w')


                  ax.set_box_aspect([1, 1, 0.4])
                  ax.view_init(elev=elev, azim=45)
                  ax.grid(False)


                  plt.tight_layout()
                  plt.savefig("/content/drive/MyDrive/Shapes_Project_2025/Image_Reduction/teeth1_" + str(num_teeth1)+"_teeth2_" + str(num_teeth2)+ "_toothdepth1_"+str(tooth_depth1*10)+ "div10_toothdepth2_"+str(tooth_depth2*10)+"div10_holeradius_" +str(hole_radius_shared*10)+"div10_elev_"+str(elev)+".png")
                  print("/content/drive/MyDrive/Shapes_Project_2025/Image_Reduction/teeth1_" + str(num_teeth1)+"_teeth2_" + str(num_teeth2)+ "_toothdepth1_"+str(tooth_depth1*10)+ "div10_toothdepth2_"+str(tooth_depth2*10)+"div10_holeradius_" +str(hole_radius_shared*10)+"div10_elev_"+str(elev)+".png")

                  plt.show()
df3.to_csv("/content/drive/MyDrive/Shapes_Project_2025/Reduction.csv")
"""

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import pandas as pd
df4=pd.DataFrame(columns=['type', 'number_turns', 'num_teeth1', 'tooth_depth1', 'hole_radius', 'num_teeth2', 'tooth_depth2', 'indent_radius','elev'])

count=0
for i in range(10,56,5):
  for elev in range(0,54,1):
    count=count+1
    print(count)
    df4.loc[len(df4)] = [4,i, -1, -1,-1,-1,-1,-1,-1]
    # Parameters for the worm gear helix
    R = 10            # Radius of the worm
    P = 10              # Pitch (distance between threads along the axis)
    N_turns = i       # Number of turns
    points_per_turn = 100

    # Parametric angle
    theta = np.linspace(0, 2 * np.pi * N_turns, N_turns * points_per_turn)

    # Helix equations
    x = R * np.cos(theta)
    y = R * np.sin(theta)
    z = (P / (2 * np.pi)) * theta

    # Plot
    fig = plt.figure(figsize=(10,10))
    ax = fig.add_subplot(111, projection='3d')
    # Plot the helix
    ax.plot3D(x, y, z, lw=2, color='steelblue')

    # === Fill inside with white cylinder ===

    r_cyl = R * 0.9  # inner radius
    z_cyl = np.linspace(min(z), max(z), 200)
    theta_cyl = np.linspace(0, 2 * np.pi, 100)
    theta_cyl, z_cyl = np.meshgrid(theta_cyl, z_cyl)
    x_cyl = r_cyl * np.cos(theta_cyl)
    y_cyl = r_cyl * np.sin(theta_cyl)

    ax.plot_surface(x_cyl, y_cyl, z_cyl, color='white', alpha=0.5, linewidth=0)

    # Hide X-axis line
    ax.set_xticks([])  # Hide ticks
    ax.set_xlabel("")  # Optionally hide label
    ax.xaxis.line.set_color((0, 0, 0, 0))  # Transparent
    ax.yaxis.line.set_color((0, 0, 0, 0))
    ax.zaxis.line.set_color((0, 0, 0, 0))

    # === Hide background ===
    ax.xaxis.pane.fill = False
    ax.yaxis.pane.fill = False
    ax.zaxis.pane.fill = False

    # Optional: Hide grid and axes ticks
    ax.grid(False)
    ax.set_xticks([])
    ax.set_yticks([])
    ax.set_zticks([])

    # Optional: Set pane color to fully transparent
    ax.xaxis.pane.set_edgecolor('w')
    ax.yaxis.pane.set_edgecolor('w')
    ax.zaxis.pane.set_edgecolor('w')
    ax.view_init(elev=elev, azim=90)

    plt.tight_layout()

    plt.savefig("/content/drive/MyDrive/Shapes_Project_2025/Image_Worm/"+str(i)+"_elev_"+str(elev)+".png")
    print("/content/drive/MyDrive/Shapes_Project_2025/Image_Worm/"+str(i)+"_elev_"+str(elev)+".png")
    plt.show()

df4.to_csv("/content/drive/MyDrive/Shapes_Project_2025/Worm.csv")



"""Parsing code

file_path_input =  '/content/spur.txt' #FeatureScript_Cone.txt' #downloaded code '/content/spur.txt'

def clean_up(text): # function to clean up text
  words_to_delete = ["* radian", ".value", "try(", "* inch)", "length\" :","\""]
  for word in words_to_delete:
    text = text.replace(word, "")
  return text

def extract_between_first_and_last_brace(text): #function to read values between braces
    start = text.find('{')
    end = text.rfind('}')
    if start != -1 and end != -1 and end > start:
        return text[start+1 :end]
    return None

def clean_dict(text): # function to clean up text
  words_to_delete = ["{", "}", "\'","\""]
  for word in words_to_delete:
    text = text.replace(word, "")
  return text
import numbers

def is_number_type(value):
    return isinstance(value, numbers.Number)
def try_convert_string_to_float(s):
    try:
        return float(s)
    except ValueError:
        return None


try:
  with open(file_path_input, 'r') as file:

      for line in file:
          # Reading each line in the file
          text = line.strip()
          #print(text)
          if((text.find('extrude') !=-1 or text.find('skConstraint') !=-1 or text.find('cPlane') !=-1 or text.find('fillet') !=-1) and text.find('ConstraintType.COINCIDENT') ==-1 ):
                # Read lines that have these elements
                text=clean_up(text).strip ()
                valu_name = text[0:text.find('(')].strip()
                print ("Parameter:",valu_name)
                #print ("Text4:",text)
                if(text.find(':') != -1):
                  name_vals = extract_between_first_and_last_brace(text) #These will be parsed into key-value
                  print ("name_vals:",name_vals)
                  #example: skConstraint(sketch, TrRJl3J0faPz, { constraintType : ConstraintType.DIAMETER, index : 1, localFirst : HonubZConnXx,  { 'value' : 2 , 'expression' : 2 in }, labelRatio : 0.6660679911818292, labelAngle : -1.2736309611148513  });
                  # extrude(context, id + "F8gMxdoJublFXSa_0", { "domain" : OperationDomain.MODEL,  "depth" : { 'value' : try(1 * inch), 'expression' : "1 in" }.value,
                  dict_result = {} #disctionary to get all numeric key-value

                  for item in name_vals.split(','):  # Split into key-value pairs
                                v=item.split(':')
                                key=v[0]
                                value=v[-1] #pick the last value, in rare case when there is bracket within bracket
                                key =clean_dict(key)
                                value =clean_dict(value)
                                dict_result[key.strip()] = value.strip() # Remove whitespace and add to dictionary
                                if valu_name == "skConstraint":
                                  valu_name = dict_result.get("constraintType") #Adding element name to get cPlaneoffset

                                if (is_number_type(try_convert_string_to_float(value.strip()))): #checking if the value in key-value is a number
                                  print("ADD",valu_name+key.strip(), value.strip())

except FileNotFoundError:
  print(f"Error: The file at {file_path_input} was not found.")
"
"""